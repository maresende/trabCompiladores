
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parse;

import Tree2.Tree;
import Tree2.Leaf;
import java_cup.runtime.*;
import ErrorMsg.ErrorMsg;
import java.util.Stack;
import java_cup.runtime.Symbol;
import java_cup.runtime.lr_parser;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Grm extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\020\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\005\000\002\003\005\000\002\003\006\000" +
    "\002\003\004\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\011\000\002\003\005\000\002\003\006\000\002" +
    "\003\012\000\002\003\003\000\002\003\004\000\002\003" +
    "\006\000\002\003\010\000\002\003\003\000\002\016\004" +
    "\000\002\016\002\000\002\017\005\000\002\017\002\000" +
    "\002\002\006\000\002\015\005\000\002\015\006\000\002" +
    "\015\003\000\002\004\007\000\002\005\007\000\002\005" +
    "\007\000\002\005\011\000\002\005\012\000\002\005\014" +
    "\000\002\005\002\000\002\007\003\000\002\007\010\000" +
    "\002\007\004\000\002\011\006\000\002\011\002\000\002" +
    "\012\007\000\002\012\002\000\002\013\004\000\002\013" +
    "\002\000\002\014\005\000\002\014\002\000\002\010\003" +
    "\000\002\006\007\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\032\004\014\006\025\010\021\034\012\036" +
    "\011\041\006\043\024\045\017\046\022\055\013\056\016" +
    "\057\020\001\002\000\004\027\213\001\002\000\070\002" +
    "\uffff\005\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023" +
    "\uffff\024\uffff\026\uffff\030\uffff\032\uffff\037\uffff\040\uffff" +
    "\042\uffff\044\uffff\047\uffff\050\uffff\051\uffff\053\uffff\054" +
    "\uffff\001\002\000\032\004\014\006\025\010\021\034\012" +
    "\036\011\041\006\043\024\045\017\046\022\055\013\056" +
    "\016\057\020\001\002\000\004\035\206\001\002\000\034" +
    "\002\000\010\032\011\041\012\044\013\034\015\033\016" +
    "\035\017\037\020\045\021\042\022\043\023\031\024\046" +
    "\001\002\000\032\004\014\006\025\010\021\034\012\036" +
    "\011\041\006\043\024\045\017\046\022\055\013\056\016" +
    "\057\020\001\002\000\070\002\ufffe\005\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\013\ufffe\015\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe\030" +
    "\ufffe\032\ufffe\037\ufffe\040\ufffe\042\ufffe\044\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\053\ufffe\054\ufffe\001\002\000\102\002" +
    "\uffdb\005\uffdb\006\167\007\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\166\026\uffdb\027\uffc8" +
    "\030\uffdb\032\uffdb\033\uffdb\037\uffdb\040\uffdb\042\uffdb\044" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\001\002" +
    "\000\070\002\ufffd\005\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\026\ufffd\030\ufffd\032\ufffd\037" +
    "\ufffd\040\ufffd\042\ufffd\044\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\053\ufffd\054\ufffd\001\002\000\004\002\165\001\002\000" +
    "\070\002\ufffc\005\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\026\ufffc\030\ufffc\032\ufffc\037\ufffc" +
    "\040\ufffc\042\ufffc\044\ufffc\047\ufffc\050\ufffc\051\ufffc\053" +
    "\ufffc\054\ufffc\001\002\000\070\002\uffe7\005\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\026\uffe7" +
    "\030\uffe7\032\uffe7\037\uffe7\040\uffe7\042\uffe7\044\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\053\uffe7\054\uffe7\001\002\000\032" +
    "\004\014\006\025\010\021\034\012\036\011\041\006\043" +
    "\024\045\017\046\022\055\013\056\016\057\020\001\002" +
    "\000\032\004\014\006\025\010\021\034\012\036\011\041" +
    "\006\043\024\045\017\046\022\055\013\056\016\057\020" +
    "\001\002\000\012\047\uffd4\051\103\053\100\054\102\001" +
    "\002\000\074\002\uffe3\005\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\075\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\026\uffe3\030\uffe3" +
    "\032\uffe3\033\074\037\uffe3\040\uffe3\042\uffe3\044\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\053\uffe3\054\uffe3\001\002\000\004" +
    "\055\065\001\002\000\034\004\014\006\025\007\uffcb\010" +
    "\021\034\012\036\011\041\006\043\024\045\017\046\022" +
    "\055\013\056\016\057\020\001\002\000\040\005\036\007" +
    "\uffc9\010\032\011\041\012\044\013\034\015\033\016\035" +
    "\017\037\020\045\021\042\022\043\023\031\024\046\050" +
    "\uffc9\001\002\000\004\007\030\001\002\000\070\002\ufffb" +
    "\005\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\026\ufffb\030\ufffb\032\ufffb\037\ufffb\040\ufffb\042" +
    "\ufffb\044\ufffb\047\ufffb\050\ufffb\051\ufffb\053\ufffb\054\ufffb" +
    "\001\002\000\032\004\014\006\025\010\021\034\012\036" +
    "\011\041\006\043\024\045\017\046\022\055\013\056\016" +
    "\057\020\001\002\000\032\004\014\006\025\010\021\034" +
    "\012\036\011\041\006\043\024\045\017\046\022\055\013" +
    "\056\016\057\020\001\002\000\032\004\014\006\025\010" +
    "\021\034\012\036\011\041\006\043\024\045\017\046\022" +
    "\055\013\056\016\057\020\001\002\000\032\004\014\006" +
    "\025\010\021\034\012\036\011\041\006\043\024\045\017" +
    "\046\022\055\013\056\016\057\020\001\002\000\032\004" +
    "\014\006\025\010\021\034\012\036\011\041\006\043\024" +
    "\045\017\046\022\055\013\056\016\057\020\001\002\000" +
    "\032\004\014\006\025\010\021\034\012\036\011\041\006" +
    "\043\024\045\017\046\022\055\013\056\016\057\020\001" +
    "\002\000\032\004\014\006\025\010\021\034\012\036\011" +
    "\041\006\043\024\045\017\046\022\055\013\056\016\057" +
    "\020\001\002\000\006\007\uffcc\050\uffcc\001\002\000\032" +
    "\004\014\006\025\010\021\034\012\036\011\041\006\043" +
    "\024\045\017\046\022\055\013\056\016\057\020\001\002" +
    "\000\032\004\014\006\025\010\021\034\012\036\011\041" +
    "\006\043\024\045\017\046\022\055\013\056\016\057\020" +
    "\001\002\000\032\004\014\006\025\010\021\034\012\036" +
    "\011\041\006\043\024\045\017\046\022\055\013\056\016" +
    "\057\020\001\002\000\032\004\014\006\025\010\021\034" +
    "\012\036\011\041\006\043\024\045\017\046\022\055\013" +
    "\056\016\057\020\001\002\000\032\004\014\006\025\010" +
    "\021\034\012\036\011\041\006\043\024\045\017\046\022" +
    "\055\013\056\016\057\020\001\002\000\032\004\014\006" +
    "\025\010\021\034\012\036\011\041\006\043\024\045\017" +
    "\046\022\055\013\056\016\057\020\001\002\000\070\002" +
    "\uffec\005\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\026\uffec\030\uffec\032\uffec\037\uffec\040\uffec" +
    "\042\uffec\044\uffec\047\uffec\050\uffec\051\uffec\053\uffec\054" +
    "\uffec\001\002\000\070\002\uffee\005\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\026\uffee\030\uffee" +
    "\032\uffee\037\uffee\040\uffee\042\uffee\044\uffee\047\uffee\050" +
    "\uffee\051\uffee\053\uffee\054\uffee\001\002\000\070\002\ufff7" +
    "\005\ufff7\007\ufff7\010\032\011\041\012\ufff7\013\ufff7\015" +
    "\033\016\035\017\037\020\045\021\042\022\043\023\031" +
    "\024\046\026\ufff7\030\ufff7\032\ufff7\037\ufff7\040\ufff7\042" +
    "\ufff7\044\ufff7\047\ufff7\050\ufff7\051\ufff7\053\ufff7\054\ufff7" +
    "\001\002\000\070\002\ufff3\005\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\026\ufff3\030\ufff3\032" +
    "\ufff3\037\ufff3\040\ufff3\042\ufff3\044\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\053\ufff3\054\ufff3\001\002\000\070\002\uffef\005" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\026\uffef\030\uffef\032\uffef\037\uffef\040\uffef\042\uffef" +
    "\044\uffef\047\uffef\050\uffef\051\uffef\053\uffef\054\uffef\001" +
    "\002\000\070\002\ufff4\005\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\015\033\016\035\017\037\020\045\021" +
    "\042\022\043\023\031\024\046\026\ufff4\030\ufff4\032\ufff4" +
    "\037\ufff4\040\ufff4\042\ufff4\044\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\053\ufff4\054\ufff4\001\002\000\070\002\ufff2\005\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\026\ufff2\030\ufff2\032\ufff2\037\ufff2\040\ufff2\042\ufff2\044" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\053\ufff2\054\ufff2\001\002" +
    "\000\040\005\036\007\uffc9\010\032\011\041\012\044\013" +
    "\034\015\033\016\035\017\037\020\045\021\042\022\043" +
    "\023\031\024\046\050\uffc9\001\002\000\006\007\uffca\050" +
    "\uffca\001\002\000\070\002\ufff1\005\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1\030\ufff1" +
    "\032\ufff1\037\ufff1\040\ufff1\042\ufff1\044\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\053\ufff1\054\ufff1\001\002\000\070\002\ufff6" +
    "\005\ufff6\007\ufff6\010\032\011\041\012\ufff6\013\ufff6\015" +
    "\033\016\035\017\037\020\045\021\042\022\043\023\031" +
    "\024\046\026\ufff6\030\ufff6\032\ufff6\037\ufff6\040\ufff6\042" +
    "\ufff6\044\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6\054\ufff6" +
    "\001\002\000\070\002\ufff0\005\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\026\ufff0\030\ufff0\032" +
    "\ufff0\037\ufff0\040\ufff0\042\ufff0\044\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\053\ufff0\054\ufff0\001\002\000\070\002\ufff5\005" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\033" +
    "\016\035\017\037\020\045\021\042\022\043\023\031\024" +
    "\046\026\ufff5\030\ufff5\032\ufff5\037\ufff5\040\ufff5\042\ufff5" +
    "\044\ufff5\047\ufff5\050\ufff5\051\ufff5\053\ufff5\054\ufff5\001" +
    "\002\000\070\002\uffed\005\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\026\uffed\030\uffed\032\uffed" +
    "\037\uffed\040\uffed\042\uffed\044\uffed\047\uffed\050\uffed\051" +
    "\uffed\053\uffed\054\uffed\001\002\000\004\014\066\001\002" +
    "\000\032\004\014\006\025\010\021\034\012\036\011\041" +
    "\006\043\024\045\017\046\022\055\013\056\016\057\020" +
    "\001\002\000\034\010\032\011\041\012\044\013\034\015" +
    "\033\016\035\017\037\020\045\021\042\022\043\023\031" +
    "\024\046\044\070\001\002\000\032\004\014\006\025\010" +
    "\021\034\012\036\011\041\006\043\024\045\017\046\022" +
    "\055\013\056\016\057\020\001\002\000\034\010\032\011" +
    "\041\012\044\013\034\015\033\016\035\017\037\020\045" +
    "\021\042\022\043\023\031\024\046\042\072\001\002\000" +
    "\032\004\014\006\025\010\021\034\012\036\011\041\006" +
    "\043\024\045\017\046\022\055\013\056\016\057\020\001" +
    "\002\000\070\002\uffe8\005\uffe8\007\uffe8\010\032\011\041" +
    "\012\044\013\034\015\033\016\035\017\037\020\045\021" +
    "\042\022\043\023\031\024\046\026\uffe8\030\uffe8\032\uffe8" +
    "\037\uffe8\040\uffe8\042\uffe8\044\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\053\uffe8\054\uffe8\001\002\000\004\055\077\001\002" +
    "\000\032\004\014\006\025\010\021\034\012\036\011\041" +
    "\006\043\024\045\017\046\022\055\013\056\016\057\020" +
    "\001\002\000\070\002\ufffa\005\ufffa\007\ufffa\010\032\011" +
    "\041\012\044\013\034\015\033\016\035\017\037\020\045" +
    "\021\042\022\043\023\031\024\046\026\ufffa\030\ufffa\032" +
    "\ufffa\037\ufffa\040\ufffa\042\ufffa\044\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\053\ufffa\054\ufffa\001\002\000\074\002\uffdd\005" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\026\uffdd\030\uffdd\032\uffdd\033\uffdd\037\uffdd" +
    "\040\uffdd\042\uffdd\044\uffdd\047\uffdd\050\uffdd\051\uffdd\053" +
    "\uffdd\054\uffdd\001\002\000\004\055\152\001\002\000\004" +
    "\047\147\001\002\000\004\055\127\001\002\000\004\055" +
    "\104\001\002\000\004\017\105\001\002\000\010\027\111" +
    "\052\106\055\107\001\002\000\004\055\126\001\002\000" +
    "\012\047\uffd3\051\uffd3\053\uffd3\054\uffd3\001\002\000\012" +
    "\047\uffd4\051\103\053\100\054\102\001\002\000\004\055" +
    "\112\001\002\000\004\031\113\001\002\000\004\055\114" +
    "\001\002\000\014\007\uffc8\014\uffc8\017\uffc8\030\uffc8\032" +
    "\uffc8\001\002\000\006\030\uffcd\032\117\001\002\000\004" +
    "\030\124\001\002\000\004\055\120\001\002\000\004\031" +
    "\121\001\002\000\004\055\114\001\002\000\010\007\uffcd" +
    "\030\uffcd\032\117\001\002\000\006\007\uffce\030\uffce\001" +
    "\002\000\012\047\uffd2\051\uffd2\053\uffd2\054\uffd2\001\002" +
    "\000\004\047\uffd9\001\002\000\012\047\uffd1\051\uffd1\053" +
    "\uffd1\054\uffd1\001\002\000\004\006\130\001\002\000\006" +
    "\007\uffcf\055\131\001\002\000\004\031\144\001\002\000" +
    "\004\007\133\001\002\000\006\017\134\031\135\001\002" +
    "\000\032\004\014\006\025\010\021\034\012\036\011\041" +
    "\006\043\024\045\017\046\022\055\013\056\016\057\020" +
    "\001\002\000\004\055\114\001\002\000\004\017\137\001" +
    "\002\000\032\004\014\006\025\010\021\034\012\036\011" +
    "\041\006\043\024\045\017\046\022\055\013\056\016\057" +
    "\020\001\002\000\042\010\032\011\041\012\044\013\034" +
    "\015\033\016\035\017\037\020\045\021\042\022\043\023" +
    "\031\024\046\047\uffd4\051\103\053\100\054\102\001\002" +
    "\000\004\047\uffd5\001\002\000\042\010\032\011\041\012" +
    "\044\013\034\015\033\016\035\017\037\020\045\021\042" +
    "\022\043\023\031\024\046\047\uffd4\051\103\053\100\054" +
    "\102\001\002\000\004\047\uffd6\001\002\000\004\055\114" +
    "\001\002\000\006\007\uffcd\032\117\001\002\000\004\007" +
    "\uffd0\001\002\000\034\004\014\006\025\010\021\034\012" +
    "\036\011\041\006\043\024\045\017\046\022\050\uffcb\055" +
    "\013\056\016\057\020\001\002\000\004\050\151\001\002" +
    "\000\070\002\uffda\005\uffda\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\013\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\026\uffda\030\uffda\032\uffda\037" +
    "\uffda\040\uffda\042\uffda\044\uffda\047\uffda\050\uffda\051\uffda" +
    "\053\uffda\054\uffda\001\002\000\006\014\154\031\153\001" +
    "\002\000\004\055\114\001\002\000\032\004\014\006\025" +
    "\010\021\034\012\036\011\041\006\043\024\045\017\046" +
    "\022\055\013\056\016\057\020\001\002\000\042\010\032" +
    "\011\041\012\044\013\034\015\033\016\035\017\037\020" +
    "\045\021\042\022\043\023\031\024\046\047\uffd4\051\103" +
    "\053\100\054\102\001\002\000\004\047\uffd8\001\002\000" +
    "\004\014\160\001\002\000\032\004\014\006\025\010\021" +
    "\034\012\036\011\041\006\043\024\045\017\046\022\055" +
    "\013\056\016\057\020\001\002\000\042\010\032\011\041" +
    "\012\044\013\034\015\033\016\035\017\037\020\045\021" +
    "\042\022\043\023\031\024\046\047\uffd4\051\103\053\100" +
    "\054\102\001\002\000\004\047\uffd7\001\002\000\070\002" +
    "\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\015\033\016\035\017\037\020\045\021\042\022\043\023" +
    "\031\024\046\026\ufff8\030\ufff8\032\ufff8\037\ufff8\040\ufff8" +
    "\042\ufff8\044\ufff8\047\ufff8\050\ufff8\051\ufff8\053\ufff8\054" +
    "\ufff8\001\002\000\070\002\uffe6\005\uffe6\007\uffe6\010\032" +
    "\011\041\012\044\013\034\015\033\016\035\017\037\020" +
    "\045\021\042\022\043\023\031\024\046\026\uffe6\030\uffe6" +
    "\032\uffe6\037\uffe6\040\uffe6\042\uffe6\044\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\053\uffe6\054\uffe6\001\002\000\004\002\001" +
    "\001\002\000\032\004\014\006\025\010\021\034\012\036" +
    "\011\041\006\043\024\045\017\046\022\055\013\056\016" +
    "\057\020\001\002\000\034\004\014\006\025\007\uffe1\010" +
    "\021\034\012\036\011\041\006\043\024\045\017\046\022" +
    "\055\013\056\016\057\020\001\002\000\004\007\176\001" +
    "\002\000\036\007\uffdf\010\032\011\041\012\044\013\034" +
    "\015\033\016\035\017\037\020\045\021\042\022\043\023" +
    "\031\024\046\032\173\001\002\000\004\007\uffe2\001\002" +
    "\000\032\004\014\006\025\010\021\034\012\036\011\041" +
    "\006\043\024\045\017\046\022\055\013\056\016\057\020" +
    "\001\002\000\036\007\uffdf\010\032\011\041\012\044\013" +
    "\034\015\033\016\035\017\037\020\045\021\042\022\043" +
    "\023\031\024\046\032\173\001\002\000\004\007\uffe0\001" +
    "\002\000\070\002\ufff9\005\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\026\ufff9\030\ufff9\032\ufff9" +
    "\037\ufff9\040\ufff9\042\ufff9\044\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\053\ufff9\054\ufff9\001\002\000\034\010\032\011\041" +
    "\012\044\013\034\015\033\016\035\017\037\020\045\021" +
    "\042\022\043\023\031\024\046\026\200\001\002\000\076" +
    "\002\uffdc\005\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\026\uffdc\030\uffdc\032\uffdc\033" +
    "\uffdc\035\uffde\037\uffdc\040\uffdc\042\uffdc\044\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\053\uffdc\054\uffdc\001\002\000\034\010" +
    "\032\011\041\012\044\013\034\015\033\016\035\017\037" +
    "\020\045\021\042\022\043\023\031\024\046\037\202\001" +
    "\002\000\032\004\014\006\025\010\021\034\012\036\011" +
    "\041\006\043\024\045\017\046\022\055\013\056\016\057" +
    "\020\001\002\000\070\002\uffe5\005\uffe5\007\uffe5\010\032" +
    "\011\041\012\044\013\034\015\033\016\035\017\037\020" +
    "\045\021\042\022\043\023\031\024\046\026\uffe5\030\uffe5" +
    "\032\uffe5\037\uffe5\040\204\042\uffe5\044\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\053\uffe5\054\uffe5\001\002\000\032\004\014" +
    "\006\025\010\021\034\012\036\011\041\006\043\024\045" +
    "\017\046\022\055\013\056\016\057\020\001\002\000\070" +
    "\002\uffe4\005\uffe4\007\uffe4\010\032\011\041\012\044\013" +
    "\034\015\033\016\035\017\037\020\045\021\042\022\043" +
    "\023\031\024\046\026\uffe4\030\uffe4\032\uffe4\037\uffe4\040" +
    "\uffe4\042\uffe4\044\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4" +
    "\054\uffe4\001\002\000\032\004\014\006\025\010\021\034" +
    "\012\036\011\041\006\043\024\045\017\046\022\055\013" +
    "\056\016\057\020\001\002\000\070\002\uffea\005\uffea\007" +
    "\uffea\010\032\011\041\012\044\013\034\015\033\016\035" +
    "\017\037\020\045\021\042\022\043\023\031\024\046\026" +
    "\uffea\030\uffea\032\uffea\037\uffea\040\uffea\042\uffea\044\uffea" +
    "\047\uffea\050\uffea\051\uffea\053\uffea\054\uffea\001\002\000" +
    "\034\010\032\011\041\012\044\013\034\015\033\016\035" +
    "\017\037\020\045\021\042\022\043\023\031\024\046\042" +
    "\211\001\002\000\032\004\014\006\025\010\021\034\012" +
    "\036\011\041\006\043\024\045\017\046\022\055\013\056" +
    "\016\057\020\001\002\000\070\002\uffe9\005\uffe9\007\uffe9" +
    "\010\032\011\041\012\044\013\034\015\033\016\035\017" +
    "\037\020\045\021\042\022\043\023\031\024\046\026\uffe9" +
    "\030\uffe9\032\uffe9\037\uffe9\040\uffe9\042\uffe9\044\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\053\uffe9\054\uffe9\001\002\000\004" +
    "\055\214\001\002\000\004\017\215\001\002\000\032\004" +
    "\014\006\025\010\021\034\012\036\011\041\006\043\024" +
    "\045\017\046\022\055\013\056\016\057\020\001\002\000" +
    "\036\010\032\011\041\012\044\013\034\015\033\016\035" +
    "\017\037\020\045\021\042\022\043\023\031\024\046\030" +
    "\uffc6\032\220\001\002\000\004\030\225\001\002\000\004" +
    "\055\221\001\002\000\004\017\222\001\002\000\032\004" +
    "\014\006\025\010\021\034\012\036\011\041\006\043\024" +
    "\045\017\046\022\055\013\056\016\057\020\001\002\000" +
    "\036\010\032\011\041\012\044\013\034\015\033\016\035" +
    "\017\037\020\045\021\042\022\043\023\031\024\046\030" +
    "\uffc6\032\220\001\002\000\004\030\uffc7\001\002\000\070" +
    "\002\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\026\uffeb\030\uffeb\032\uffeb\037\uffeb\040" +
    "\uffeb\042\uffeb\044\uffeb\047\uffeb\050\uffeb\051\uffeb\053\uffeb" +
    "\054\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\016\002\006\003\007\004\004\010\003\015" +
    "\022\020\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\006\003\207\004\004\010\003\015\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\006" +
    "\003\200\004\004\010\003\015\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\006\003" +
    "\163\004\004\010\003\015\022\001\001\000\014\002\006" +
    "\003\162\004\004\010\003\015\022\001\001\000\004\005" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\006\003\025\004\004\010\003\013\026\015\022\001" +
    "\001\000\004\014\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\006\003\063\004\004\010\003\015" +
    "\022\001\001\000\014\002\006\003\062\004\004\010\003" +
    "\015\022\001\001\000\014\002\006\003\061\004\004\010" +
    "\003\015\022\001\001\000\014\002\006\003\060\004\004" +
    "\010\003\015\022\001\001\000\014\002\006\003\057\004" +
    "\004\010\003\015\022\001\001\000\014\002\006\003\055" +
    "\004\004\010\003\015\022\001\001\000\014\002\006\003" +
    "\054\004\004\010\003\015\022\001\001\000\002\001\001" +
    "\000\014\002\006\003\053\004\004\010\003\015\022\001" +
    "\001\000\014\002\006\003\052\004\004\010\003\015\022" +
    "\001\001\000\014\002\006\003\051\004\004\010\003\015" +
    "\022\001\001\000\014\002\006\003\050\004\004\010\003" +
    "\015\022\001\001\000\014\002\006\003\047\004\004\010" +
    "\003\015\022\001\001\000\014\002\006\003\046\004\004" +
    "\010\003\015\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\006\003\066\004\004\010\003" +
    "\015\022\001\001\000\002\001\001\000\014\002\006\003" +
    "\070\004\004\010\003\015\022\001\001\000\002\001\001" +
    "\000\014\002\006\003\072\004\004\010\003\015\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\006" +
    "\003\075\004\004\010\003\015\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\114\001\001\000\002\001\001\000\004" +
    "\012\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\121\001\001\000\004\012\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\006\003\141\004\004\010\003\015\022" +
    "\001\001\000\004\010\135\001\001\000\002\001\001\000" +
    "\014\002\006\003\137\004\004\010\003\015\022\001\001" +
    "\000\004\005\140\001\001\000\002\001\001\000\004\005" +
    "\142\001\001\000\002\001\001\000\004\010\144\001\001" +
    "\000\004\012\145\001\001\000\002\001\001\000\016\002" +
    "\006\003\025\004\004\010\003\013\147\015\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\156\001\001\000\014\002\006\003\154\004\004" +
    "\010\003\015\022\001\001\000\004\005\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\006\003\160" +
    "\004\004\010\003\015\022\001\001\000\004\005\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\006\003\176\004\004\010" +
    "\003\015\022\001\001\000\016\002\006\003\170\004\004" +
    "\010\003\015\022\016\167\001\001\000\002\001\001\000" +
    "\004\017\171\001\001\000\002\001\001\000\014\002\006" +
    "\003\173\004\004\010\003\015\022\001\001\000\004\017" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\006\003\202\004\004\010\003\015\022\001\001\000\002" +
    "\001\001\000\014\002\006\003\204\004\004\010\003\015" +
    "\022\001\001\000\002\001\001\000\014\002\006\003\206" +
    "\004\004\010\003\015\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\006\003\211\004\004\010\003" +
    "\015\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\006\003\215\004\004\010\003" +
    "\015\022\001\001\000\004\006\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\006" +
    "\003\222\004\004\010\003\015\022\001\001\000\004\006" +
    "\223\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	Symbol aux = this.lexer.yylex();
	return (aux!=null) ? aux : new Symbol(0); 

    }


	Lexer lexer;
	ErrorMsg error;
	public static Tree ResultTree = new Tree();
	public static void Resull(){
		ResultTree.Print();
	}
	public Grm(Lexer lexer, ErrorMsg error){
		this();
		this.lexer = lexer;
		this.error = error;
	}
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Grm$actions {
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action_part00000000(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= exp1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf start_val = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // exp1 ::= exp 
            {
              Leaf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp1", "NULL"); RESULT.addChild(e); Grm.ResultTree.setRoot(RESULT); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp1",14, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= letexp 
            {
              Leaf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
			RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= NIL 
            {
              Leaf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
			RESULT = new Leaf("exp", "NULL"); System.out.println(""); RESULT.addChild(new Leaf("NIL", e)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= NUM 
            {
              Leaf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
			RESULT = new Leaf("exp", "NULL"); RESULT.addChild(new Leaf("NUM", e)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= STRING 
            {
              Leaf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
			RESULT = new Leaf("exp", "NULL"); RESULT.addChild(new Leaf("STRING", e)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= LPAR expseq RPAR 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e2 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
			RESULT = new Leaf("exp", "NULL"); RESULT.addChild(new Leaf("LPAR", e1)); RESULT.addChild(e2); RESULT.addChild(new Leaf("RPAR",e3)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= lvaluecont ASSIGN exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
			RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("ASSIGN", e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= ID LPAR args RPAR 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
			RESULT = new Leaf("exp", "NULL"); RESULT.addChild(new Leaf("ID", e1)); RESULT.addChild(new Leaf("LPAR", e2)); RESULT.addChild(e3); RESULT.addChild(new Leaf("RPAR",e4)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= MINUS exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e2 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
			RESULT = new Leaf("exp", "NULL"); RESULT.addChild(new Leaf("MINUS", e1)); RESULT.addChild(e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp TIMES exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("TIMES",e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp DIVIDE exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("DIVIDE",e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp MINUS exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("MINUS",e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp PLUS exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("PLUS",e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp DIFF exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("DIFF",e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp EQUAL exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("EQUAL",e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp SMALLER exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("SMALLER",e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp BIGGER exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("BIGGER",e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp SMALLER_EQUAL exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("SMALLER_EQUAL",e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp BIGGER_EQUAL exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("BIGGER_EQUAL",e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp AND exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("AND",e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= exp OR exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("OR",e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= typeid LKEY ID EQUAL exp idexps RKEY 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e5 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e6 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e7 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("LKEY",e2)); RESULT.addChild(new Leaf("ID", e3)); RESULT.addChild(new Leaf("EQUAL",e4)); RESULT.addChild(e5); RESULT.addChild(e6); RESULT.addChild(new Leaf("RKEY", e7));  
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= idbracs OF exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp","NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("OF", e2)); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= WHILE exp DO exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e2 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(new Leaf("WHILE", e1)); RESULT.addChild(e2); RESULT.addChild(new Leaf("DO",e3)); RESULT.addChild(e4); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= FOR ID ASSIGN exp TO exp DO exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e6 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e7 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e8 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(new Leaf("FOR", "NULL")); RESULT.addChild(new Leaf("ID",e2)); RESULT.addChild(new Leaf("ASSIGN", e3)); RESULT.addChild(e4); RESULT.addChild(new Leaf("TO",e5)); RESULT.addChild(e6); RESULT.addChild(new Leaf("DO", e7)); RESULT.addChild(e8);  
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= BREAK 
            {
              Leaf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(new Leaf("BREAK", e)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= COMMENT exp 
            {
              Leaf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= IF exp THEN exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e2 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(new Leaf("IF", e1)); RESULT.addChild(e2); RESULT.addChild(new Leaf("THEN",e3)); RESULT.addChild(e4); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= IF exp THEN exp ELSE exp 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Leaf e2 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e6 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("exp", "NULL"); RESULT.addChild(new Leaf("IF", e1)); RESULT.addChild(e2); RESULT.addChild(new Leaf("THEN",e3)); RESULT.addChild(e4); RESULT.addChild(new Leaf("ELSE",e5)); RESULT.addChild(e6); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= lvaluecont 
            {
              Leaf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		RESULT = new Leaf("exp", "NULL"); RESULT.addChild(e); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // args ::= exp args1 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e2 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("args", "NULL"); RESULT.addChild(e1); RESULT.addChild(e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // args ::= 
            {
              Leaf RESULT =null;
		 RESULT = new Leaf("EMPTY", "NULL"); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // args1 ::= VIRG exp args1 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e2 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT =  new Leaf("args1", "NULL"); RESULT.addChild(e2); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("args1",13, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // args1 ::= 
            {
              Leaf RESULT =null;
		 RESULT = new Leaf("EMPTY", "NULL"); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("args1",13, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // idbracs ::= ID LBRA exp RBRA 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("idbracs", "NULL"); RESULT.addChild(new Leaf("LBRA", e2)); RESULT.addChild(e3); RESULT.addChild(new Leaf("RBRA", e4)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("idbracs",0, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lvaluecont ::= lvaluecont DOT ID 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("lvaluecont", "NULL"); RESULT.addChild(e1); RESULT.addChild(new Leaf("DOT",e2)); RESULT.addChild(new Leaf("ID", e3)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("lvaluecont",11, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lvaluecont ::= ID LBRA exp RBRA 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("lvaluecont", "NULL"); RESULT.addChild(new Leaf("LBRA", e2)); RESULT.addChild(e3); RESULT.addChild(new Leaf("RBRA", e4)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("lvaluecont",11, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lvaluecont ::= ID 
            {
              Leaf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("lvaluecont","NULL"); RESULT.addChild(new Leaf("ID",e)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("lvaluecont",11, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // letexp ::= LET decs IN expseq END 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Leaf e2 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("letexp", "NULL"); RESULT.addChild(new Leaf("LET", e1)); RESULT.addChild(e2); RESULT.addChild(new Leaf("IN",e3)); RESULT.addChild(e4); RESULT.addChild(new Leaf("END",e5)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("letexp",2, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // decs ::= TYPE ID EQUAL ty decs 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e5 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("decs", "NULL"); RESULT.addChild(new Leaf("TYPE", e1)); RESULT.addChild(new Leaf("ID",e2)); RESULT.addChild(new Leaf("EQUAL", e3)); RESULT.addChild(e4);  RESULT.addChild(e5); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("decs",3, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // decs ::= VAR ID ASSIGN exp decs 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e5 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("decs", "NULL"); RESULT.addChild(new Leaf("VAR", e1)); RESULT.addChild(new Leaf("ID",e2)); RESULT.addChild(new Leaf("ASSIGN", e3)); RESULT.addChild(e4); RESULT.addChild(e5); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("decs",3, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // decs ::= VAR ID COLON typeid ASSIGN exp decs 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e6 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e7 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("decs", "NULL"); RESULT.addChild(new Leaf("VAR", e1)); RESULT.addChild(new Leaf("ID",e2)); RESULT.addChild(new Leaf("COLON", e3)); RESULT.addChild(e4); RESULT.addChild(new Leaf("ASSIGN",e5)); RESULT.addChild(e6); RESULT.addChild(e7); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("decs",3, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // decs ::= FUNCTION ID LPAR tyfields RPAR EQUAL exp decs 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e6 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e7 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e8 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("decs", "NULL"); RESULT.addChild(new Leaf("FUNCTION", "NULL")); RESULT.addChild(new Leaf("ID",e2)); RESULT.addChild(new Leaf("LPAR", e3)); RESULT.addChild(e4); RESULT.addChild(new Leaf("RPAR",e5)); RESULT.addChild(new Leaf("EQUAL",e6)); RESULT.addChild(e7); RESULT.addChild(e8);  
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("decs",3, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // decs ::= FUNCTION ID LPAR tyfields RPAR COLON typeid EQUAL exp decs 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String e6 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Leaf e7 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e8 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e9 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e10left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e10 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("decs", "NULL"); RESULT.addChild(new Leaf("FUNCTION", "NULL")); RESULT.addChild(new Leaf("ID",e2)); RESULT.addChild(new Leaf("LPAR", e3)); RESULT.addChild(e4); RESULT.addChild(new Leaf("RPAR",e5)); RESULT.addChild(new Leaf("COLON",e6)); RESULT.addChild(e7); RESULT.addChild(new Leaf("EQUAL", e8));  RESULT.addChild(e9); RESULT.addChild(e10); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("decs",3, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // decs ::= 
            {
              Leaf RESULT =null;
		 RESULT = new Leaf("EMPTY", "NULL"); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("decs",3, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ty ::= ID 
            {
              Leaf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("ty", "NULL"); RESULT.addChild(new Leaf("ID", e)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("ty",5, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ty ::= LKEY ID COLON typeid tyfields1 RKEY 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e5 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e6 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("ty", "NULL"); RESULT.addChild(new Leaf("LKEY", e1)); RESULT.addChild(new Leaf("ID", e2)); RESULT.addChild(new Leaf("COLON",e3)); RESULT.addChild(e4); RESULT.addChild(e5); RESULT.addChild(new Leaf("RKEY", e6)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("ty",5, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ty ::= ARRAY_OF ID 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		RESULT = new Leaf("ty", "NULL"); RESULT.addChild(new Leaf("ARRAY_OF", e1)); RESULT.addChild(new Leaf("ID", e2)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("ty",5, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tyfields ::= ID COLON typeid tyfields1 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("tyfields", "NULL"); RESULT.addChild(new Leaf("ID", e1)); RESULT.addChild(new Leaf("COLON", e2)); RESULT.addChild(e3); RESULT.addChild(e4); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("tyfields",7, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tyfields ::= 
            {
              Leaf RESULT =null;
		 RESULT = new Leaf("EMPTY", "NULL"); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("tyfields",7, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tyfields1 ::= VIRG ID COLON typeid tyfields1 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e5 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("tyfields1", "NULL"); RESULT.addChild(new Leaf("VIRG", e1)); RESULT.addChild(new Leaf("ID", e2)); RESULT.addChild(new Leaf("COLON", e3)); RESULT.addChild(e4); RESULT.addChild(e5);
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("tyfields1",8, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tyfields1 ::= 
            {
              Leaf RESULT =null;
		 RESULT = new Leaf("EMPTY", "NULL"); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("tyfields1",8, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expseq ::= exp expseq1 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e1 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e2 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT =  new Leaf("expseq", "NULL"); RESULT.addChild(e1); RESULT.addChild(e2); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("expseq",9, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expseq ::= 
            {
              Leaf RESULT =null;
		 RESULT = new Leaf("EMPTY", "NULL"); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("expseq",9, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expseq1 ::= SEMI exp expseq1 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e2 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e3 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("expseq1", "NULL"); RESULT.addChild(new Leaf("SEMI", e1)); RESULT.addChild(e2); RESULT.addChild(e3); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("expseq1",10, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expseq1 ::= 
            {
              Leaf RESULT =null;
		 RESULT = new Leaf("EMPTY", "NULL"); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("expseq1",10, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // typeid ::= ID 
            {
              Leaf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT =  new Leaf("typeid", "NULL"); RESULT.addChild(new Leaf("ID", e)); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("typeid",6, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // idexps ::= VIRG ID EQUAL exp idexps 
            {
              Leaf RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Leaf e4 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()).right;
		Leaf e5 = (Leaf)((java_cup.runtime.Symbol) CUP$Grm$stack.peek()).value;
		 RESULT = new Leaf("idexps", "NULL"); RESULT.addChild(new Leaf("VIRG", e1)); RESULT.addChild(new Leaf("ID", e2)); RESULT.addChild(new Leaf("EQUAL", e3)); RESULT.addChild(e4); RESULT.addChild(e5); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("idexps",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)), ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // idexps ::= 
            {
              Leaf RESULT =null;
		 RESULT = new Leaf("EMPTY", "NULL"); 
              CUP$Grm$result = parser.getSymbolFactory().newSymbol("idexps",4, ((java_cup.runtime.Symbol)CUP$Grm$stack.peek()), RESULT);
            }
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Grm$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
              return CUP$Grm$do_action_part00000000(
                               CUP$Grm$act_num,
                               CUP$Grm$parser,
                               CUP$Grm$stack,
                               CUP$Grm$top);
    }
}

}
